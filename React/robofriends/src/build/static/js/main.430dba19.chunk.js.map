{"version":3,"sources":["Card.js","CardList.js","Robots.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","Robots","map","user","index","key","username","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","children","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAceA,EAZF,SAACC,GACb,OACC,yBAAKC,UAAU,kDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCaCC,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OAAO,kBAAC,EAAD,CACLC,IAAKD,EACLP,GAAII,EAAOG,GAAOP,GAClBC,KAAMG,EAAOG,GAAON,KACpBQ,SAAUL,EAAOG,GAAOE,SACxBP,MAAOE,EAAOG,GAAOL,aCbfE,EAAS,CACpB,CACEJ,GAAI,EACJC,KAAM,mBACNQ,SAAU,YACVP,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,kBACNQ,SAAU,WACVP,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,kBACNQ,SAAU,WACVP,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNQ,SAAU,YACVP,MAAO,uBAET,CACEF,GAAI,EACJC,KAAM,oBACNQ,SAAU,aACVP,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,uBACNQ,SAAU,mBACVP,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNQ,SAAU,eACVP,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNQ,SAAU,gBACVP,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNQ,SAAU,WACVP,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNQ,SAAU,iBACVP,MAAO,2BC3CIQ,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKf,UAAY,OAChB,2BACCA,UAAY,mCACZgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCICI,G,YARA,SAACpB,GACf,OACC,yBAAKC,UAAW,eACdD,EAAMqB,YC6BKC,E,YA7Bd,aAAgB,IAAD,8BACd,+CAODC,eAAgB,SAACC,GAChB,EAAKC,SAAS,CAACV,YAAaS,EAAME,OAAOC,SAPzC,EAAKC,MAAQ,CACZpB,OAAQA,EACRO,YAAa,IAJA,E,sEAYL,IAAD,OAEFc,EAAiBC,KAAKF,MAAMpB,OAAOuB,QAAO,SAAAC,GAC/C,OAAOA,EAAM3B,KAAK4B,cAAcC,SAAS,EAAKN,MAAMb,YAAYkB,kBAEjE,OACC,yBAAKhC,UAAY,MAChB,wBAAIA,UAAU,MAAd,uBACA,kBAAC,EAAD,CAAWe,aAAcc,KAAKP,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUf,OAAQqB,U,GAxBLM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.430dba19.chunk.js","sourcesContent":["import React from 'react';\r\n//get photo from web using robots.js array id as the user name\r\nconst Card = (props) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-blue dib br3 pa3 ma2 grow shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n} \r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card.js'\r\n\r\nconst CardList = ( {Robots} ) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tRobots.map((user,index) => {\r\n\t\t\t\t\treturn <Card\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\tid={Robots[index].id}\r\n\t\t\t\t\t\t\tname={Robots[index].name}\r\n\t\t\t\t\t\t\tusername={Robots[index].username}\r\n\t\t\t\t\t\t\temail={Robots[index].email}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</div>)\r\n} \r\n\r\nexport default CardList; \r\n\r\n// This is the same as the map function above\r\n//\treturn (\r\n//\t\t<div>\r\n//\t\t\t<Card id={Robots[0].id} name={Robots[0].name} username={Robots[0].username} email={Robots[0].email} />\r\n//\t\t\t<Card id={Robots[1].id} name={Robots[1].name} username={Robots[1].username} email={Robots[1].email} />\r\n//\t\t\t<Card id={Robots[2].id} name={Robots[2].name} username={Robots[2].username} email={Robots[2].email} />\r\n//\t\t\t<Card id={Robots[3].id} name={Robots[3].name} username={Robots[3].username} email={Robots[3].email} />\r\n//\t\t\t<Card id={Robots[4].id} name={Robots[4].name} username={Robots[4].username} email={Robots[4].email} />\r\n//\t\t\t<Card id={Robots[5].id} name={Robots[5].name} username={Robots[5].username} email={Robots[5].email} />\r\n//\t\t\t<Card id={Robots[6].id} name={Robots[6].name} username={Robots[6].username} email={Robots[6].email} />\r\n//\t\t\t<Card id={Robots[7].id} name={Robots[7].name} username={Robots[7].username} email={Robots[7].email} />\r\n//\t\t\t<Card id={Robots[8].id} name={Robots[8].name} username={Robots[8].username} email={Robots[8].email} />\r\n//\t\t\t<Card id={Robots[9].id} name={Robots[9].name} username={Robots[9].username} email={Robots[9].email} />\r\n//\t\t</div>\r\n//\t);","export const Robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Krishan Naidoo12',\r\n    username: 'Krishan12',\r\n    email: 'Krishan.Naidoo@gmail.com'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Keyuri Naidoo28',\r\n    username: 'Keyuri28',\r\n    email: 'Keyuri28@gmail.com'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Sayuri Naidoo26',\r\n    username: 'Sayuri26',\r\n    email: 'Sayuri26@gmail.com'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Sayuran Naidoo26',\r\n    username: 'Sayuran26',\r\n    email: 'Sayuran26@gmail.com'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Shamanta Koopan18',\r\n    username: 'Shamanta18',\r\n    email: 'Shamanta18@gmail.com'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];","//Seach Box Component for RoboFriends React App\r\nimport React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n\treturn (\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='Search Robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","//React Component \"Scroll\" to freeze Page header and search box\r\n//So that the robot Cards can be scrolled\r\n\r\nimport React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div className =\"scrollCards\">\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","//Main App for RoboFriends React App\r\nimport React, { Component } from 'react';\r\nimport CardList from './CardList.js';\r\nimport { Robots } from './Robots.js';\r\nimport SearchBox from './SearchBox.js';\r\nimport './App.css';\r\nimport Scroll from './Scroll.js';\r\nclass App extends Component {\r\n\t//(this object describes the app in terms of what changes it, i.e Robots array and search field\r\n\tconstructor () {\r\n\t\tsuper()\r\n\t\tthis.state = { \r\n\t\t\tRobots: Robots, \r\n\t\t\tsearchField: '',\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange= (event) => {\r\n\t\tthis.setState({searchField: event.target.value})\r\n\t}\r\n\r\n\trender() {\r\n\t\t //pass the changes to seachbox to the search box.js\r\n\t\tconst filteredRobots = this.state.Robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<div className = \"tc\">\r\n\t\t\t\t<h1 className='f1'>Krishan RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList Robots={filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\n//import CardList from './CardList.js' - Moved to App.js\n//import { Robots } from './Robots.js' - Moved to App.js\nimport * as serviceWorker from './serviceWorker';\n//Import tachyons style templates\nimport 'tachyons';\n\n// Moved to App.js ReactDOM.render(<CardList Robots={Robots} />, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n//Write at html footer ReactDOM.render(<code>Hello World!</code>, document.getElementById('root2'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}